@{
    ViewBag.Title = "Index";
}
<head>
    <!-- Important to load artyom in the head tag, this give time to load all the voices in the browser -->
    <script src="~/Scripts/artyom.window.min.js"></script>
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
</head>
 <h1><img src="~/Images/paycor-logo.png" /></h1>

 <div style="margin-left: 250px;font-size: xx-large;color: #f47321;">What would you like to do?</div>
 <div style="margin-left: 300px;font-size: medium;">Use your Voice ID to say your command.</div>
<canvas class="visualizer" width="700" height="500"></canvas>
<script>
    // Create a global accesible instance of artyom
    window.artyom = new Artyom();
    if (navigator.mediaDevices.getUserMedia) {
        var self = this;
        var constraints = { audio: true };
        chunks = [];
        badgeNumber = null;
        blob = null;
        navigator.mediaDevices.getUserMedia(constraints).then(
            function (stream) {
                var options = { mimeType: 'audio/webm' }
                mediaRecorder = new MediaRecorder(stream, options);
                mediaRecorder.onstop = function (e) {
                    canvasDraw("Processing...",'green');
                    blob = new Blob(chunks, { type: 'audio/wav' });
                    chunks = [];
                    console.log(window.URL.createObjectURL(blob));
                    badgeNumber.trim().replace(/' '/g, '').replace(/[a-z]/g, '');
                    var number = badgeNumber.split(' ').join('');
                    var userId = "EmployeeBadge" + number;
                    var xhr = new XMLHttpRequest();
                    xhr.onload = function (e) {
                        if (this.readyState === 4) {
                            if (this.status == 200) {
                                canvasDraw("Punch Submitted!", 'green');
                                setTimeout(canvasDraw("Listening...", '#6dd5ed'), 3000);
                            } else {
                                console.log("Server returned: ", e.target.responseText);
                            }
                        }
                    };                    
                    xhr.open("POST", "/Roar.Api/api/v1/Authentication/authandparse/" + userId + "/1234", true);
                    xhr.setRequestHeader('Content-Type', 'audio/wav');                  
                    xhr.send(blob);  
                }
                mediaRecorder.ondataavailable = function (e) {
                    chunks.push(e.data);
                }   
                canvasDraw("Listening...", '#6dd5ed');
            }, function (err) {
                console.log('The following error occured: ' + err);
            });
    }

    function clearCanvas() {
        var canvas = document.querySelector('.visualizer'),
            canvasCtx = canvas.getContext("2d");
            canvasCtx.clearRect(0, 0, canvas.width, canvas.height);
    }

    function canvasDraw(text,color) {
        var canvas = document.querySelector('.visualizer'),
            canvasCtx = canvas.getContext("2d");  
            //clear before draw
            canvasCtx.clearRect(0, 0, canvas.width, canvas.height);
        var x = 450,
            y = 210,
            // Radii of the white glow.
            innerRadius = 195,
            outerRadius = 205,
            // Radius of the entire circle.
            radius = 200;

        var gradient = canvasCtx.createRadialGradient(x, y, innerRadius, x, y, outerRadius);
        gradient.addColorStop(0, '#ffff');
        gradient.addColorStop(1, color);
        canvasCtx.arc(x, y, radius, 0, 2 * Math.PI);
        canvasCtx.fillStyle = gradient;
        canvasCtx.fill();

        canvasCtx.beginPath();
        canvasCtx.fillStyle = "black";
        canvasCtx.font = "30px Arial";
        canvasCtx.fillText(text, 370, 220);
        canvasCtx.fill();

        //if (text === "Punch Submitted!") {
            canvasCtx.beginPath();
            canvasCtx.moveTo(425, 150);
            canvasCtx.lineTo(450, 175);
            canvasCtx.lineTo(500, 125);
            canvasCtx.lineWidth = 10;
            canvasCtx.strokeStyle = color;
            canvasCtx.stroke(); 
        //}        
    }
</script>
<script>
        artyom.addCommands({
            //The smart property of the command needs to be true
            smart: true,
            indexes: ["number *","badge number *", "badgenumber *", "badge *", "badg number *", "badgnumber *", "badg *", "baj number *", "bajnumber *", "baj *"],
            action: function (i, wildcard) {
                // Speak alterable value
                badgeNumber = wildcard;
                if (mediaRecorder.state !== "recording") {
                    mediaRecorder.start();
                    console.log("Recording Starts");
                }
            }
        });
        artyom.addCommands({
            indexes: ["this time", " this time ", "time", " time", " time "],
            action: function (i) {
                if (mediaRecorder.state === "recording" || mediaRecorder.state === "paused") {
                    mediaRecorder.stop();
                    console.log("Recording Ends");                                       
                }
            }
        });

        artyom.initialize({
            lang: "en-GB",// More languages are documented in the library
            continuous: true,//if you have https connection, you can activate continuous mode
            debug: true,//Show everything in the console
            listen: true // Start listening when this function is triggered
        });
</script>

